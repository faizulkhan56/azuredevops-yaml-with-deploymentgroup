trigger:
  branches:
    include:
      - main

pool:
  name: Default

variables:
  imageName: 'dotnetapp'
  acrLoginServer: 'mycompanyacr212.azurecr.io'
  tag: '$(Build.BuildId)'

steps:
# 1) Checkout source
- checkout: self

# 2) Build & push Docker image to ACR
- task: Docker@2
  displayName: 'Build and Push Image to ACR'
  inputs:
    containerRegistry: 'acr-service-conn'
    repository: '$(imageName)'
    command: 'buildAndPush'
    Dockerfile: '**/Dockerfile'
    tags: |
      $(tag)
      latest

# 3) Trivy scan using PowerShell
- task: PowerShell@2
  displayName: 'üõ°Ô∏è Trivy Vulnerability Scan'
  inputs:
    targetType: 'inline'
    script: |
      # 1) Make sure Chocolatey‚Äôs bin is on PATH (so trivy.exe is found)
      $env:PATH = "C:\ProgramData\chocolatey\bin;$env:PATH"

      # 2) Prepare the artifact staging directory
      if (-not (Test-Path -Path $env:BUILD_ARTIFACTSTAGINGDIRECTORY)) {
        New-Item -ItemType Directory -Path $env:BUILD_ARTIFACTSTAGINGDIRECTORY | Out-Null
      }

      # 3) Build full image name
      $image = "$($env:ACRLOGINSERVER)/$($env:IMAGENAME):$($env:TAG)"
      Write-Host "Scanning image $image with Trivy‚Ä¶"

      # 4) Run the scan and output JSON
      trivy image `
        --no-progress `
        --format json `
        --output "$($env:BUILD_ARTIFACTSTAGINGDIRECTORY)\trivy-report.json" `
        $image

      Write-Host "‚úÖ Trivy report generated at $($env:BUILD_ARTIFACTSTAGINGDIRECTORY)\trivy-report.json"

# 4) Publish the Trivy report as a pipeline artifact
- task: PublishPipelineArtifact@1
  displayName: 'üìÑ Publish Trivy Report'
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)\trivy-report.json'
    artifact: 'trivy-report'

# 5) (Optional) Publish dummy artifact to trigger CD
- task: PublishBuildArtifacts@1
  displayName: 'Publish dummy artifact to trigger release'
  inputs:
    PathtoPublish: 'README.md'
    ArtifactName: 'drop'
    publishLocation: 'Container'

